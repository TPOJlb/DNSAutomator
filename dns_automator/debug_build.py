#!/usr/bin/env python3
import os
import sys
import subprocess
import shutil
import time

def print_header(text):
    print("\n" + "=" * 60)
    print(f"üîç {text}")
    print("=" * 60)

def run_command(command, description, show_output=True):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥"""
    print(f"\n‚ñ∂Ô∏è  {description}...")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")
    
    try:
        result = subprocess.run(command, capture_output=True, text=True, timeout=300)
        
        if show_output or result.returncode != 0:
            if result.stdout:
                print("   STDOUT:")
                print(result.stdout[:1000] + "..." if len(result.stdout) > 1000 else result.stdout)
            if result.stderr:
                print("   STDERR:")
                print(result.stderr[:1000] + "..." if len(result.stderr) > 1000 else result.stderr)
        
        if result.returncode == 0:
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ (–∫–æ–¥: {result.returncode})")
            return False
            
    except subprocess.TimeoutExpired:
        print(f"   ‚è∞ –¢–∞–π–º–∞—É—Ç –∫–æ–º–∞–Ω–¥—ã")
        return False
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def check_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    print_header("–ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í")
    
    files_to_check = [
        ('app.py', '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥'),
        ('icon.png', '–ò–∫–æ–Ω–∫–∞ PNG'),
        ('config.json', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'),
        ('icons.icns', '–ò–∫–æ–Ω–∫–∞ macOS'),
        ('icons.ico', '–ò–∫–æ–Ω–∫–∞ Windows'),
    ]
    
    for file, desc in files_to_check:
        exists = os.path.exists(file)
        status = '‚úÖ' if exists else '‚ùå'
        print(f"{status} {desc}: {file} {'(—Å—É—â–µ—Å—Ç–≤—É–µ—Ç)' if exists else '(–Ω–µ –Ω–∞–π–¥–µ–Ω)'}")

def check_directories():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫"""
    print_header("–ü–†–û–í–ï–†–ö–ê –ü–ê–ü–û–ö")
    
    dirs_to_check = ['.', 'dist', 'build', 'protected_build']
    
    for dir_path in dirs_to_check:
        exists = os.path.exists(dir_path)
        status = '‚úÖ' if exists else '‚ùå'
        size_info = ""

        if exists and dir_path != '.':
            try:
                if os.path.isdir(dir_path):
                    item_count = len(os.listdir(dir_path))
                    size_info = f" ({item_count} items)"
                else:
                    size_info = f" ({os.path.getsize(dir_path)} bytes)"
            except:
                size_info = " (–æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞)"
        
        print(f"{status} {dir_path}/{size_info}")

def clean_build():
    """–û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫–∏ —Å–±–æ—Ä–∫–∏"""
    print_header("–û–ß–ò–°–¢–ö–ê –ü–ê–ü–û–ö –°–ë–û–†–ö–ò")
    
    for folder in ['build', 'dist', 'protected_build', '__pycache__']:
        if os.path.exists(folder):
            print(f"üßπ –£–¥–∞–ª—è–µ–º {folder}/")
            shutil.rmtree(folder)
        else:
            print(f"üìÅ {folder}/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def protect_code():
    """–ó–∞—â–∏—â–∞–µ—Ç –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é PyArmor"""
    print_header("–®–ê–ì 2: –ó–ê–©–ò–¢–ê –ö–û–î–ê")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Python —Ñ–∞–π–ª –¥–ª—è –∑–∞—â–∏—Ç—ã
    protect_script = """
import pyarmor
try:
    # –ù–æ–≤—ã–π API PyArmor
    pyarmor.cli.gen(
        '--output', 'protected_build',
        '--restrict', '4',
        '--advanced', '2',
        '--enable-suffix',
        '--package-runtime', '0',
        'app.py'
    )
    print("‚úÖ –ö–æ–¥ –∑–∞—â–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞—â–∏—Ç—ã: {e}")
    exit(1)
"""
    
    with open('temp_protect.py', 'w') as f:
        f.write(protect_script)
    
    success = run_command([sys.executable, 'temp_protect.py'], "–ó–∞—â–∏—Ç–∞ –∫–æ–¥–∞ PyArmor", True)
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if os.path.exists('temp_protect.py'):
        os.remove('temp_protect.py')
    
    return success

def main():
    print("üöÄ –ó–ê–ü–£–°–ö –†–ï–ê–õ–¨–ù–û–ô –ü–†–û–í–ï–†–ö–ò –°–ë–û–†–ö–ò")
    print(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"Python: {sys.version}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    check_files()
    check_directories()
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–±–æ—Ä–∫–∏
    clean_build()
    
    # –®–∞–≥ 1: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫
    print_header("–®–ê–ì 1: –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ò–ö–û–ù–û–ö")
    success_icons = run_command([sys.executable, 'convert_icons.py'], "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫", True)
    
    if not success_icons:
        print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫!")
        return False
    
    # –®–∞–≥ 2: –ó–∞—â–∏—Ç–∞ –∫–æ–¥–∞
    success_protect = protect_code()
    if not success_protect:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞—â–∏—Ç—ã –∫–æ–¥–∞!")
        return False
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ protected_build
    print_header("–®–ê–ì 3: –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –§–ê–ô–õ–û–í")
    for file in ['icons.icns', 'icons.ico', 'config.json']:
        if os.path.exists(file):
            shutil.copy2(file, 'protected_build/')
            print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω {file}")
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª {file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –®–∞–≥ 4: –°–±–æ—Ä–∫–∞ macOS
    print_header("–®–ê–ì 4: –°–ë–û–†–ö–ê macOS")
    original_dir = os.getcwd()
    os.chdir('protected_build')
    success_mac = run_command([sys.executable, '../build_mac.py'], "–°–±–æ—Ä–∫–∞ macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", True)
    os.chdir(original_dir)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print_header("–§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
    check_directories()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
    mac_app = 'protected_build/dist/DNSAutomator.app'
    windows_exe = 'protected_build/dist/DNSAutomator.exe'
    dmg_file = 'protected_build/DNSAutomator.dmg'
    zip_file = 'protected_build/DNSAutomator_Windows.zip'
    
    files_created = []
    
    for path, desc in [
        (mac_app, 'macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'),
        (windows_exe, 'Windows EXE'),
        (dmg_file, 'macOS DMG'),
        (zip_file, 'Windows ZIP')
    ]:
        if os.path.exists(path):
            files_created.append((path, desc))
            print(f"‚úÖ {desc}: {path}")
        else:
            print(f"‚ùå {desc}: –Ω–µ —Å–æ–∑–¥–∞–Ω")
    
    if files_created:
        print_header("üéâ –£–°–ü–ï–•! –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
        for path, desc in files_created:
            print(f"üì¶ {desc}:")
            print(f"   {os.path.abspath(path)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
            if os.path.isfile(path):
                size = os.path.getsize(path)
                print(f"   –†–∞–∑–º–µ—Ä: {size:,} bytes ({size/1024/1024:.1f} MB)")
            elif os.path.isdir(path):
                print(f"   –ü–∞–ø–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    else:
        print_header("üòû –ù–ò–ß–ï–ì–û –ù–ï –°–û–ó–î–ê–ù–û")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫")
        return False
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\n" + "=" * 60)
            print("üéâ –†–ï–ê–õ–¨–ù–ê—è –°–ë–û–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("=" * 60)
        else:
            print("\n" + "=" * 60)
            print("‚ùå –°–ë–û–†–ö–ê –ó–ê–í–ï–†–®–ò–õ–ê–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò!")
            print("=" * 60)
            sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)