import PyInstaller.__main__
import os
import shutil
import sys

def clean_build_folders():
    """–û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫–∏ —Å–±–æ—Ä–∫–∏"""
    folders_to_clean = ['build', 'dist', '__pycache__']
    for folder in folders_to_clean:
        if os.path.exists(folder):
            print(f"üßπ –û—á–∏—â–∞–µ–º {folder}/")
            shutil.rmtree(folder)

def build_windows_exe():
    """–°–æ–±–∏—Ä–∞–µ—Ç Windows EXE —Ñ–∞–π–ª"""
    print("ü™ü –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É Windows EXE...")
    
    clean_build_folders()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
    if not os.path.exists('app.py'):
        print("‚ùå –û–®–ò–ë–ö–ê: app.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è PyInstaller
    args = [
        'app.py',
        '--onefile',
        '--windowed',
        '--name=DNSAutomator',
        '--hidden-import=tkinter',
        '--hidden-import=requests',
        '--hidden-import=gspread',
        '--hidden-import=oauth2client.service_account',
        '--hidden-import=xml.etree.ElementTree',
        '--hidden-import=json',
        '--hidden-import=os',
        '--hidden-import=time',
        '--hidden-import=re',
        '--hidden-import=socket',
        '--hidden-import=threading',
        '--hidden-import=atexit',
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists('icons.ico'):
        args.append('--icon=icons.ico')
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞")
    elif os.path.exists('icon.png'):
        print("‚ö†Ô∏è  icons.ico –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º icon.png")
        args.append('--icon=icon.png')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists('config.json'):
        args.append('--add-data=config.json;.')
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω config.json")
    
    print("üèóÔ∏è  –ó–∞–ø—É—Å–∫–∞–µ–º PyInstaller –¥–ª—è Windows...")
    try:
        PyInstaller.__main__.run(args)
        print("‚úÖ Windows EXE —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω!")
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
        exe_path = 'dist/DNSAutomator.exe'
        if os.path.exists(exe_path):
            print(f"üìÅ EXE —Ñ–∞–π–ª: {exe_path}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {e}")
        return False

def create_zip_archive():
    """–°–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤ –¥–ª—è Windows"""
    print("üì¶ –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤...")
    
    exe_path = 'dist/DNSAutomator.exe'
    if not os.path.exists(exe_path):
        print("‚ùå EXE —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        import zipfile
        zip_path = 'DNSAutomator_Windows.zip'
        
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            zipf.write(exe_path, 'DNSAutomator.exe')
            if os.path.exists('config.json'):
                zipf.write('config.json', 'config.json')
            if os.path.exists('README.txt'):
                zipf.write('README.txt', 'README.txt')
        
        print(f"‚úÖ ZIP –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {zip_path}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ZIP: {e}")
        return False

if __name__ == "__main__":
    print("=" * 50)
    print("üöÄ Windows Builder")
    print("=" * 50)
    
    if build_windows_exe():
        create_zip_archive()
    else:
        print("‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        sys.exit(1)