#!/usr/bin/env python3
import os
import sys
import subprocess
import shutil
import time

def print_step(message):
    print(f"\n{'='*60}")
    print(f"üöÄ {message}")
    print(f"{'='*60}")

def run_command(cmd, description, timeout=600):
    print(f"\n‚ñ∂Ô∏è  {description}...")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    
    try:
        start_time = time.time()
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=timeout)
        end_time = time.time()
        
        if result.returncode == 0:
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ ({end_time - start_time:.1f} —Å–µ–∫)")
            if result.stdout:
                print(f"   –í—ã–≤–æ–¥: {result.stdout[:500]}...")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ (–∫–æ–¥: {result.returncode}, –≤—Ä–µ–º—è: {end_time - start_time:.1f} —Å–µ–∫)")
            if result.stderr:
                print(f"   –û—à–∏–±–∫–∞: {result.stderr}")
            if result.stdout:
                print(f"   –í—ã–≤–æ–¥: {result.stdout}")
            return False
            
    except subprocess.TimeoutExpired:
        print(f"   ‚è∞ –¢–∞–π–º–∞—É—Ç ({timeout} —Å–µ–∫)")
        return False
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def clean_build():
    """–û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫–∏ —Å–±–æ—Ä–∫–∏"""
    print("\nüßπ –û—á–∏—â–∞–µ–º –ø–∞–ø–∫–∏ —Å–±–æ—Ä–∫–∏...")
    for folder in ['build', 'dist', '__pycache__']:
        if os.path.exists(folder):
            shutil.rmtree(folder)
            print(f"   –£–¥–∞–ª–µ–Ω–æ: {folder}/")

def main():
    print("üéØ –°–ë–û–†–ö–ê WINDOWS EXE")
    print(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
    if not os.path.exists('app.py'):
        print("‚ùå –û–®–ò–ë–ö–ê: app.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–±–æ—Ä–∫–∏
    clean_build()
    
    # –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è PyInstaller
    print_step("–ü–û–î–ì–û–¢–û–í–ö–ê –ê–†–ì–£–ú–ï–ù–¢–û–í")
    
    args = [
        'app.py',
        '--onefile',
        '--windowed',
        '--name=DNSAutomator',
        '--hidden-import=tkinter',
        '--hidden-import=requests',
        '--hidden-import=gspread',
        '--hidden-import=oauth2client.service_account',
        '--hidden-import=xml.etree.ElementTree',
        '--hidden-import=json',
        '--hidden-import=os',
        '--hidden-import=time',
        '--hidden-import=re',
        '--hidden-import=socket',
        '--hidden-import=threading',
        '--hidden-import=atexit',
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists('icons.ico'):
        args.append('--icon=icons.ico')
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ Windows")
    elif os.path.exists('icon.png'):
        args.append('--icon=icon.png')
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ PNG –∏–∫–æ–Ω–∫–∞")
    else:
        print("‚ö†Ô∏è  –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º : –≤–º–µ—Å—Ç–æ ;)
    if os.path.exists('config.json'):
        args.append('--add-data=config.json:.')
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω config.json")
    
    print("–ê—Ä–≥—É–º–µ–Ω—Ç—ã PyInstaller:")
    for arg in args:
        print(f"  {arg}")
    
    # –®–∞–≥ 2: –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É
    print_step("–ó–ê–ü–£–°–ö –°–ë–û–†–ö–ò WINDOWS EXE")
    print("‚è≥ –°–±–æ—Ä–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-15 –º–∏–Ω—É—Ç...")
    
    success = run_command(['pyinstaller'] + args, "–°–±–æ—Ä–∫–∞ Windows EXE", timeout=900)
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print_step("–ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    
    exe_path = 'dist/DNSAutomator.exe'
    if os.path.exists(exe_path):
        file_size = os.path.getsize(exe_path)
        print(f"‚úÖ WINDOWS EXE –°–û–ó–î–ê–ù!")
        print(f"üìÅ –§–∞–π–ª: {exe_path}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {file_size:,} –±–∞–π—Ç ({file_size/1024/1024:.1f} MB)")
        
        # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        import zipfile
        zip_path = 'DNSAutomator_Windows.zip'
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            zipf.write(exe_path, 'DNSAutomator.exe')
            if os.path.exists('config.json'):
                zipf.write('config.json', 'config.json')
        
        print(f"üì¶ ZIP –∞—Ä—Ö–∏–≤: {zip_path}")
        return True
    else:
        print("‚ùå EXE —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã –≤ dist
        if os.path.exists('dist'):
            files = os.listdir('dist')
            print(f"üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ dist: {files}")
        return False

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\n" + "="*60)
            print("üéâ –°–ë–û–†–ö–ê WINDOWS EXE –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("="*60)
        else:
            print("\n" + "="*60)
            print("‚ùå –°–ë–û–†–ö–ê –ù–ï –£–î–ê–õ–ê–°–¨!")
            print("="*60)
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –°–±–æ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)