#!/usr/bin/env python3
import os
import sys
import subprocess
import shutil

def print_step(step):
    print(f"\n{'='*60}")
    print(f"üöÄ {step}")
    print(f"{'='*60}")

def run_command(cmd, description):
    print(f"\n‚ñ∂Ô∏è  {description}...")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode == 0:
            print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            if result.stdout:
                print(f"   –í—ã–≤–æ–¥: {result.stdout[:200]}...")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ (–∫–æ–¥: {result.returncode})")
            if result.stderr:
                print(f"   STDERR: {result.stderr}")
            if result.stdout:
                print(f"   STDOUT: {result.stdout}")
            return False
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def check_files():
    print("\nüìÅ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í:")
    files = [
        ('app.py', '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥'),
        ('icon.png', '–ò–∫–æ–Ω–∫–∞ PNG'),
        ('icons.icns', '–ò–∫–æ–Ω–∫–∞ macOS'),
        ('icons.ico', '–ò–∫–æ–Ω–∫–∞ Windows'),
        ('config.json', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è')
    ]
    
    for file, desc in files:
        exists = os.path.exists(file)
        status = "‚úÖ" if exists else "‚ùå"
        print(f"   {status} {desc}: {file}")

def clean_build():
    print("\nüßπ –û–ß–ò–°–¢–ö–ê –ü–ê–ü–û–ö –°–ë–û–†–ö–ò:")
    for folder in ['build', 'dist', '__pycache__']:
        if os.path.exists(folder):
            shutil.rmtree(folder)
            print(f"   –£–¥–∞–ª–µ–Ω–æ: {folder}/")
        else:
            print(f"   –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder}/")

def main():
    print("üéØ –ü–†–û–°–¢–ê–Ø –°–ë–û–†–ö–ê –ë–ï–ó –ó–ê–©–ò–¢–´")
    print(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"Python: {sys.version}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    check_files()
    
    if not os.path.exists('app.py'):
        print("‚ùå –û–®–ò–ë–ö–ê: app.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–±–æ—Ä–∫–∏
    clean_build()
    
    # –®–∞–≥ 1: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫
    print_step("–®–ê–ì 1: –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ò–ö–û–ù–û–ö")
    if not run_command([sys.executable, 'convert_icons.py'], "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫"):
        print("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏–∫–æ–Ω–æ–∫")
    
    # –®–∞–≥ 2: –°–±–æ—Ä–∫–∞ macOS
    print_step("–®–ê–ì 2: –°–ë–û–†–ö–ê macOS")
    if not run_command([sys.executable, 'build_mac.py'], "–°–±–æ—Ä–∫–∞ macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"):
        print("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ macOS")
        return False
    
    # –®–∞–≥ 3: –°–±–æ—Ä–∫–∞ Windows
    print_step("–®–ê–ì 3: –°–ë–û–†–ö–ê WINDOWS")
    if not run_command([sys.executable, 'build_windows.py'], "–°–±–æ—Ä–∫–∞ Windows EXE"):
        print("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Windows")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print_step("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ë–û–†–ö–ò")
    
    created_files = []
    for path, desc in [
        ('dist/DNSAutomator.app', 'macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'),
        ('dist/DNSAutomator.exe', 'Windows EXE'),
        ('DNSAutomator.dmg', 'macOS DMG'),
        ('DNSAutomator_Windows.zip', 'Windows ZIP')
    ]:
        if os.path.exists(path):
            created_files.append((path, desc))
            size = os.path.getsize(path) if os.path.isfile(path) else "–ø–∞–ø–∫–∞"
            print(f"‚úÖ {desc}: {path} ({size})")
        else:
            print(f"‚ùå {desc}: –Ω–µ —Å–æ–∑–¥–∞–Ω")
    
    if created_files:
        print(f"\nüéâ –£–°–ü–ï–•! –°–æ–∑–¥–∞–Ω–æ {len(created_files)} —Ñ–∞–π–ª–æ–≤")
        return True
    else:
        print("\nüòû –ù–ò–ß–ï–ì–û –ù–ï –°–û–ó–î–ê–ù–û")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\n" + "="*60)
        print("‚úÖ –°–ë–û–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("="*60)
    else:
        print("\n" + "="*60)
        print("‚ùå –°–ë–û–†–ö–ê –ó–ê–í–ï–†–®–ò–õ–ê–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò!")
        print("="*60)
        sys.exit(1)