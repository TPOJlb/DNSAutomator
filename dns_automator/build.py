#!/usr/bin/env python3
import os
import sys
import subprocess
import shutil
from pathlib import Path

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    
    dependencies = {
        'pyinstaller': 'PyInstaller',
        'pyarmor': 'PyArmor', 
        'requests': 'Requests',
        'gspread': 'gspread',
        'oauth2client': 'oauth2client'
    }
    
    missing = []
    for package, name in dependencies.items():
        try:
            if package == 'pyinstaller':
                import PyInstaller
            elif package == 'pyarmor':
                import pyarmor
            elif package == 'requests':
                import requests
            elif package == 'gspread':
                import gspread
            elif package == 'oauth2client':
                import oauth2client
            print(f"‚úÖ {name}")
        except ImportError:
            print(f"‚ùå {name}")
            missing.append(package)
    
    return missing

def check_files_exist():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏"""
    print("\nüîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
    
    files_to_check = [
        ('dist/DNSAutomator.app', 'macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'),
        ('dist/DNSAutomator.exe', 'Windows EXE'),
        ('DNSAutomator.dmg', 'macOS DMG'),
        ('DNSAutomator_Windows.zip', 'Windows ZIP')
    ]
    
    found_files = []
    for file_path, description in files_to_check:
        if os.path.exists(file_path):
            print(f"‚úÖ {description}: {file_path}")
            found_files.append((file_path, description))
        else:
            print(f"‚ùå {description}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return found_files

def run_command(command, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
            return False
        return True
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def main():
    print("=" * 50)
    print("üöÄ DNSAutomator Builder")
    print("Python:", sys.version)
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    if not os.path.exists('app.py'):
        print("‚ùå –û–®–ò–ë–ö–ê: app.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    
    if not os.path.exists('icon.png'):
        print("‚ùå –û–®–ò–ë–ö–ê: icon.png –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    missing = check_dependencies()
    if missing:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip3 install " + " ".join(missing))
        sys.exit(1)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏
    print("\nüîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏...")
    if not run_command([sys.executable, 'convert_icons.py'], "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫"):
        print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫")
        sys.exit(1)
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Å–±–æ—Ä–∫–∏
    print("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å–±–æ—Ä–∫–∏:")
    print("1. –û–±—ã—á–Ω–∞—è —Å–±–æ—Ä–∫–∞ (macOS + Windows)")
    print("2. –ó–∞—â–∏—â–µ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ (macOS + Windows)")
    print("3. –¢–æ–ª—å–∫–æ macOS")
    print("4. –¢–æ–ª—å–∫–æ Windows")
    
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
    
    success = False
    
    if choice == "1":
        print("\nüèóÔ∏è  –û–±—ã—á–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º...")
        success1 = run_command([sys.executable, 'build_mac.py'], "–°–±–æ—Ä–∫–∞ macOS")
        success2 = run_command([sys.executable, 'build_windows.py'], "–°–±–æ—Ä–∫–∞ Windows")
        success = success1 or success2
        
    elif choice == "2":
        print("\nüîí –ó–∞—â–∏—â–µ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º...")
        success = run_command([sys.executable, 'protect_and_build.py'], "–ó–∞—â–∏—â–µ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞")
        
    elif choice == "3":
        print("\nüçé –°–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è macOS...")
        success = run_command([sys.executable, 'build_mac.py'], "–°–±–æ—Ä–∫–∞ macOS")
        
    elif choice == "4":
        print("\nü™ü –°–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Windows...")
        success = run_command([sys.executable, 'build_windows.py'], "–°–±–æ—Ä–∫–∞ Windows")
        
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if success:
        print("\n" + "=" * 50)
        print("‚úÖ –ü–†–û–¶–ï–°–° –°–ë–û–†–ö–ò –ó–ê–í–ï–†–®–ï–ù!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã —Ä–µ–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª–∏—Å—å
        found_files = check_files_exist()
        
        if found_files:
            print("\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
            for file_path, description in found_files:
                print(f"   {description}: {file_path}")
        else:
            print("\n‚ùå –§–ê–ô–õ–´ –ù–ï –°–û–ó–î–ê–ù–´!")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫")
            
        print("=" * 50)
    else:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –°–ë–û–†–ö–ò")
        print("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ª–æ–≥–∞—Ö –≤—ã—à–µ")
        sys.exit(1)

if __name__ == "__main__":
    main()