import PyInstaller.__main__
import os
import shutil
import subprocess
import sys

def clean_build_folders():
    """–û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫–∏ —Å–±–æ—Ä–∫–∏"""
    folders_to_clean = ['build', 'dist', '__pycache__']
    for folder in folders_to_clean:
        if os.path.exists(folder):
            print(f"üßπ –û—á–∏—â–∞–µ–º {folder}/")
            shutil.rmtree(folder)

def build_mac_app():
    """–°–æ–±–∏—Ä–∞–µ—Ç macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    print("üçé –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    clean_build_folders()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
    if not os.path.exists('app.py'):
        print("‚ùå –û–®–ò–ë–ö–ê: app.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è PyInstaller
    args = [
        'app.py',
        '--onefile',
        '--windowed',
        '--name=DNSAutomator',
        '--hidden-import=tkinter',
        '--hidden-import=requests',
        '--hidden-import=gspread',
        '--hidden-import=oauth2client.service_account',
        '--hidden-import=xml.etree.ElementTree',
        '--hidden-import=json',
        '--hidden-import=os',
        '--hidden-import=time',
        '--hidden-import=re',
        '--hidden-import=socket',
        '--hidden-import=threading',
        '--hidden-import=atexit',
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists('icons.icns'):
        args.append('--icon=icons.icns')
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists('config.json'):
        args.append('--add-data=config.json:.')
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω config.json")
    
    print("üèóÔ∏è  –ó–∞–ø—É—Å–∫–∞–µ–º PyInstaller...")
    try:
        PyInstaller.__main__.run(args)
        print("‚úÖ macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {e}")
        return False

def create_dmg():
    """–°–æ–∑–¥–∞–µ—Ç DMG —Ñ–∞–π–ª"""
    print("üì¶ –°–æ–∑–¥–∞–µ–º DMG —Ñ–∞–π–ª...")
    
    app_path = 'dist/DNSAutomator.app'
    if not os.path.exists(app_path):
        print("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ create-dmg
    try:
        result = subprocess.run(['which', 'create-dmg'], 
                              capture_output=True, text=True, check=True)
        if not result.stdout.strip():
            print("‚ÑπÔ∏è  create-dmg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install create-dmg")
            return False
    except subprocess.CalledProcessError:
        print("‚ÑπÔ∏è  create-dmg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # –°–æ–∑–¥–∞–µ–º DMG
    try:
        subprocess.run([
            'create-dmg',
            '--volname', 'DNSAutomator',
            '--window-pos', '200', '120',
            '--window-size', '800', '400',
            '--icon-size', '100',
            '--icon', 'DNSAutomator.app', '200', '190',
            '--hide-extension', 'DNSAutomator.app',
            '--app-drop-link', '600', '190',
            '--no-internet-enable',
            'DNSAutomator.dmg',
            app_path
        ], check=True)
        print("‚úÖ DMG —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: DNSAutomator.dmg")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DMG: {e}")
        return False

if __name__ == "__main__":
    print("=" * 50)
    print("üöÄ macOS Builder")
    print("=" * 50)
    
    if build_mac_app():
        create_dmg()
    else:
        print("‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        sys.exit(1)